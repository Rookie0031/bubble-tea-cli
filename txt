이 코드는 Bubble Tea와 lipgloss를 사용하여 터미널 기반의 사용자 인터페이스(TUI)를 구현한 예제입니다. 이 프로그램은 사용자가 EKS 클러스터를 선택하고, 로컬 경로를 입력하여 데이터를 복사하는 과정을 단계별로 안내합니다.
주요 구성 요소
모델 정의:
model 구조체는 프로그램의 상태를 관리합니다. 여기에는 현재 단계(step), 로컬 경로(localPath), 입력 모드 여부(inputFocus), 선택된 EKS 인덱스(selectedEKS), 그리고 EKS 옵션 목록(eksOptions)이 포함됩니다.
스타일 정의:
lipgloss를 사용하여 텍스트 스타일을 정의합니다. titleStyle, stepStyle, highlightStyle, listStyle은 각각 제목, 단계 설명, 강조 텍스트, 목록 항목의 스타일을 설정합니다.
프로그램 초기화:
Init 함수는 초기 명령을 설정합니다. 여기서는 특별한 초기 명령이 필요하지 않으므로 nil을 반환합니다.
4. 상태 업데이트:
Update 함수는 사용자 입력에 따라 프로그램의 상태를 업데이트합니다.
방향키(up, down)로 EKS 클러스터를 선택하고, enter 키로 선택을 확정합니다.
로컬 경로 입력 모드에서는 사용자가 입력한 경로를 실시간으로 업데이트합니다.
q 또는 ctrl+c를 누르면 프로그램이 종료됩니다.
5. 뷰 렌더링:
View 함수는 현재 상태에 따라 화면에 표시할 내용을 결정합니다.
각 단계에 맞는 설명과 사용자 안내 메시지를 표시합니다.
선택된 EKS 클러스터와 입력된 로컬 경로를 실시간으로 보여줍니다.
6. 명령 실행:
executeStep 함수는 각 단계에서 필요한 명령을 실행합니다.
0단계에서는 선택된 EKS 클러스터에 대해 aws eks update-kubeconfig 명령을 실행합니다.
1단계에서는 입력된 로컬 경로로 kubectl cp 명령을 실행하고, 작업이 완료되면 다음 단계로 이동합니다.
7. 프로그램 시작:
main 함수에서 tea.NewProgram을 사용하여 프로그램을 시작합니다. 초기 모델을 설정하고, 프로그램이 종료될 때까지 실행합니다.
프로그램 흐름
EKS 클러스터 선택: 사용자는 방향키와 엔터 키를 사용하여 EKS 클러스터를 선택합니다.
로컬 경로 입력: 선택이 완료되면 로컬 경로를 입력할 수 있는 모드로 전환됩니다.
3. 명령 실행 및 완료: 로컬 경로 입력 후 엔터 키를 누르면 데이터 복사 명령이 실행되고, 작업이 완료되면 종료 메시지가 표시됩니다.
이 프로그램은 터미널에서 직관적인 사용자 인터페이스를 제공하여 사용자가 단계별로 작업을 수행할 수 있도록 돕습니다. Bubble Tea와 lipgloss를 활용하여 텍스트 기반의 UI를 쉽게 구성할 수 있습니다.
